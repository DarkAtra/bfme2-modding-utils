// this is a comment

// `*` defines a property with a given type in round brackets. Some types might have additional information such as length in round brackets
// the following line denotes a property called assetName of type String where that string has a fixed length of 10 bytes
// * assetName(String(length = 10))
// it is possible to reference previously parsed properties like so:
// * assetNameLength(UInt)
// * assetName(String(length = assetNameLength))

// `-> loop` defines the start of a loop followed by a space and then a definition for the bounds of the loop
// the following line denotes a loop that starts from 1 (inclusive) and ends at 10 (exclusive)
// -> loop [1, 10)
// properties defined in a loop should be intended with one additional star per loop depth
// `<-` defines the end of the current loop
// the following 3 lines denote a loop from 0 (inclusive) to 2 (inclusive) where the property name i read/written each cycle
// -> loop [0, 2]
// ** name(String(length = 10))
// <-
// it is possible to reference previously parsed properties by name
// property names can be used multiple times, if a property is referenced the closest definition is used
// in the following example the inner length property is referenced
// * length(UInt)
// -> loop(0, length) // references the length property outside of the loop
// ** length(UInt)
// ** name(String(length = length)) // references the length inside of the loop
// <-

* fourCC(String(length = 4))

// AssetNames
* numberOfAssetNames(UInt)
-> loop [numberOfAssetNames, 1]
** assetNameLength(7BitInt)
** assetName(String(length = assetNameLength))
** assetIndex(UInt) // in descending order
<-

* assetIndex(UInt) // determines what chunk of data follows

// HeightMapData: is the first asset for maps created in world-builder
* assetVersion(UShort) // rotwk uses assetVersion 5
* assetSize(UInt)
* width(UInt)
* height(UInt)
* borderWidth(UInt)
* numberOfBorders(UInt)
-> loop [0, numberOfBorders)
** borderOffsetX(UInt) // if assetVersion >= 6
** borderOffsetY(UInt) // if assetVersion >= 6
** borderX(UInt)
** borderY(UInt)
<-
* area(UInt) // must match width * height
-> loop [0, width)
-> loop [0, height)
*** elevationAtXY(UShort) // type is Byte if assetVersion < 5
<-
<-

// BlendTileData
* assetVersion(UShort) // rotwk uses assetVersion 18
* assetSize(UInt)
* numberOfTiles(UInt) // must match the height maps area
-> loop [0, height)
-> loop [0, width)
*** tile(UShort)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** blend(UShort) // type is UInt if assetVersion < 14 or assetVersion >= 23
<-
<-
-> loop [0, height)
-> loop [0, width)
*** threeWayBlend(UInt)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** cliffTexture(UInt)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** impassability(SageBoolean) // TODO: document how SageBooleans are parsed
<-
<-
-> loop [0, height)
-> loop [0, width)
*** impassabilityToPlayers(SageBoolean)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** passageWidths(SageBoolean)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** taintability(SageBoolean)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** extraPassability(SageBoolean)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** flammability(Byte)
<-
<-
-> loop [0, height)
-> loop [0, width)
*** visibility(SageBoolean)
<-
<-
* textureCellCount(UInt)
* blendsCount(UInt) // the game subtracts 1 if the value is greater than 0 for some reason
* cliffBlendsCount(UInt) // the game subtracts 1 if the value is greater than 0 for some reason
* numberOfBlendTileTextures(UInt)
-> loop [0, numberOfBlendTileTextures)
** cellStart(UInt)
** cellCount(UInt)
** cellSize(UInt)
** magicValue(UInt)
** textureName(UShortPrefixedString)
<-
* magicValue1(UInt)
* magicValue2(UInt)
-> loop [0, blendsCount)
* secondaryTextureTile(UInt)
* rawBlendDirection(ByteArray(length = 4))
* flags(Byte)
* twoSided(Boolean)
* magicValue1(UInt)
* magicValue2(UInt)
<-
-> loop [0, cliffBlendsCount)
* textureTile(UInt)
* bottomLeftX(Float)
* bottomLeftY(Float)
* bottomRightX(Float)
* bottomRightY(Float)
* topRightX(Float)
* topRightY(Float)
* topLeftX(Float)
* topLeftY(Float)
* unknown2(UShort)
<-

// WorldInfo
* assetVersion(UShort) // rotwk uses assetVersion 1
* assetSize(UInt)
* numberOfProperties(UShort)
-> loop [0, numberOfProperties)
** propertyType(UByte)
** assetNameIndex(UInt(bits = 24)) // little endian 24-bit UInt
** propertyValue(Boolean) // if propertyType == 0
** propertyValue(UInt) // if propertyType == 1
** propertyValue(Float) // if propertyType == 2
** propertyValue(UShortPrefixedString(charset = ASCII)) // if propertyType == 3 or propertyType == 5
** propertyValue(UShortPrefixedString(charset = UTF-16-LE)) // if propertyType == 4
<-

// MPPositionList
* assetVersion(UShort) // rotwk uses assetVersion 0
* assetSize(UInt)
-> while (currentInputStreamPosition < currentAssetEndPosition)
// MPPositionInfo
** assetIndex(UInt) // this index must resolve to a MPPositionInfo asset
** assetVersion(UShort) // rotwk uses assetVersion 1
** assetSize(UInt)
** isHuman(Boolean)
** isComputer(Boolean)
** loadAIScript(Boolean)
** team(UInt)
** numberOfSideRestrictions(UInt)
-> loop [0, numberOfSideRestrictions)
*** sideRestrictionLength(UShort)
*** sideRestriction(String(length = sideRestrictionLength))
<-
<-

// SidesList
* assetVersion(UShort) // rotwk uses assetVersion 6
* assetSize(UInt)
* unknown(Boolean)
* numberOfPlayers(UInt)
-> loop [0, numberOfPlayers)
** numberOfProperties(UShort)
-> loop [0, numberOfProperties)
*** propertyType(UByte)
*** assetNameIndex(UInt(bits = 24)) // little endian 24-bit UInt
*** propertyValue(Boolean) // if propertyType == 0
*** propertyValue(UInt) // if propertyType == 1
*** propertyValue(Float) // if propertyType == 2
*** propertyValue(UShortPrefixedString(charset = ASCII)) // if propertyType == 3 or propertyType == 5
*** propertyValue(UShortPrefixedString(charset = UTF-16-LE)) // if propertyType == 4
<-
** numberOfBuildListItems(UInt)
-> loop [0, numberOfBuildListItems)
*** buildingName(UShortPrefixedString)
*** name(UShortPrefixedString)
*** positionX(Float)
*** positionY(Float)
*** positionZ(Float)
*** angle(Float)
*** isAlreadyBuilt(Boolean)
*** rebuilds(UInt)
*** script(UShortPrefixedString)
*** startingHealth(UInt)
*** unknown1(Boolean)
*** unknown2(Boolean)
*** unknown3(Boolean)
<-
<-

// LibraryMapLists
// Teams
// PlayerScriptsList
// BuildLists
// ObjectsList
// TriggerAreas
// StandingWaterAreas
// RiverAreas
// StandingWaveAreas
// GlobalLighting
// PostEffectsChunk
// EnvironmentData
// NamedCameras
// CameraAnimationList
// WaypointsList
